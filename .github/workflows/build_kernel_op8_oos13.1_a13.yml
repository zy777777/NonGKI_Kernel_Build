name: Build Kernel OnePlus 8t (HOS11) with KSU and SUSFS
on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Configuration
        run: |
          CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/instantnoodle_oos.env | head -n 1 | cut -d "=" -f 2)
          CONFIG_LIST=(
              DEVICE_NAME
              DEVICE_CODENAME
              CUSTOM_CMDS
              EXTRA_CMDS
              KERNEL_SOURCE
              KERNEL_BRANCH
              CLANG_SOURCE
              CLANG_BRANCH
              GCC_64_SOURCE
              GCC_64_BRANCH
              GCC_32_SOURCE
              GCC_32_BRANCH
              DEFCONFIG_SOURCE
              DEFCONFIG_NAME
              KERNELSU_SOURCE
              KERNELSU_BRANCH
              KERNELSU_NAME
              SUSFS_ENABLE
              SUSFS_FIXED
              AK3_SOURCE
              AK3_BRANCH
              ROM_TEXT

          )
          ls -al ./

          for CONFIG in "${CONFIG_LIST[@]}"; do
              if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
              else
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              fi
          done

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 4096
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "false"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install necessary packages
        run: |
          lsb_release -a
          UBUNTU_VERSION=$(lsb_release -sr)
          sudo apt-get update

          if [ $UBUNTU_VERSION == "22.04" ]; then
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
            sudo apt-get install p7zip p7zip-full -y
          else
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3
            sudo apt-get install zstd libc6 binutils libc6-dev-i386 gcc g++ p7zip p7zip-full -y
          fi

      - name: Set Compile Environment
        run: |
          cd $GITHUB_WORKSPACE

          # Variable
          GCC_64_BIN=aarch64-linux-android-
          GCC_32_BIN=arm-linux-androideabi-

          # Set GCC Aarch64
          if [[ ${{ env.GCC_64_SOURCE }} =~ git ]]; then
              git clone ${{ env.GCC_64_SOURCE }} -b ${{ env.GCC_64_BRANCH }} gcc-64 --depth=1
          fi
          if [[ ${{ env.GCC_64_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-64.tar.gz ${{ env.GCC_64_SOURCE }}
                mkdir gcc-64
                tar -C gcc-64/ -zxvf gcc-64.tar.gz
          fi
          if [[ ${{ env.GCC_64_SOURCE }} == *'.zip' ]]; then
              wget -O gcc-64.zip ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
          fi
          echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-64/bin/$GCC_64_BIN" >> $GITHUB_ENV

          # Set GCC ARM32
          if [[ ${{ env.GCC_32_SOURCE }} =~ git ]]; then
              git clone ${{ env.GCC_32_SOURCE }} -b ${{ env.GCC_32_BRANCH }} gcc-32 --depth=1
          fi
          if [[ ${{ env.GCC_32_SOURCE }} == *'.tar.gz' ]]; then
              wget -O gcc-32.tar.gz ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              tar -C gcc-32/ -zxvf gcc-32.tar.gz
          fi
          if [[ ${{ env.GCC_32_SOURCE }} == *'.zip' ]]; then
              wget -O gcc-32.zip ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              unzip gcc-32.zip -d gcc-32/
          fi
          echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/gcc-32/bin/$GCC_32_BIN" >> $GITHUB_ENV

          # Set Clang
          if [[ ${{ env.CLANG_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CLANG_SOURCE }} == *'.tar.gz' ]]; then
                  wget -O clang.tar.gz ${{ env.CLANG_SOURCE }}
                  mkdir clang-custom
                  tar -C clang-custom/ -zxvf clang.tar.gz
              elif [[ ${{ env.CLANG_SOURCE }} == *'.tar.xz' ]]; then
                  wget -O clang.tar.xz ${{ env.CLANG_SOURCE }}
                  mkdir clang-custom
                  tar -C clang-custom/ -xvf clang.tar.xz --strip-components 1
              else
                  git clone ${{ env.CLANG_SOURCE }} -b ${{ env.CLANG_BRANCH }} clang-custom --depth=1
              fi
          else
              wget -O clang.zip ${{ env.CLANG_SOURCE }}
              mkdir clang-custom
              unzip clang.zip -d clang-custom/
          fi

      - name: Get Kernel Source
        run: |
          cd $GITHUB_WORKSPACE
          git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_BRANCH }} device_kernel --depth=1
          if [[ -n "${{ env.DEFCONFIG_SOURCE }}" ]]; then
            wget ${{ env.DEFCONFIG_SOURCE }} -O device_kernel/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi
          echo "KERNEL_VERSION=$(head -n 3 device_kernel/Makefile | grep -E 'VERSION|PATCHLEVEL' | awk '{print $3}' | paste -sd '.')" >> $GITHUB_ENV

      - name: Set KSU and SUSFS for DEFCONFIG
        run: |
          cd $GITHUB_WORKSPACE/device_kernel
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          if [[ ${{ env.SUSFS_ENABLE }} == "true" ]]; then
            echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "# CONFIG_KSU_SUSFS_SUS_OVERLAYFS is not set" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi

      - name: Set Anykernel3 and KernelSU and Others
        run: |
          # Variable
          SUSFS_SOURCE=https://gitlab.com/simonpunk/susfs4ksu.git
          SUSFS_BRANCH=kernel-${{ env.KERNEL_VERSION }}
          KERNEL_PATCHES=https://github.com/JackA1ltman/NonGKI_Kernel_Patches.git

          # Set AK3 and KSU
          cd $GITHUB_WORKSPACE/device_kernel
          git clone ${{ env.AK3_SOURCE }} -b ${{ env.AK3_BRANCH }} Anykernel3 --depth=1
          curl -sSL ${{ env.KERNELSU_SOURCE }} | bash -s ${{ env.KERNELSU_BRANCH }}
          KSU_VERSION=$(cd ${{ env.KERNELSU_NAME }} && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo "UPLOADNAME=-${{ env.KERNELSU_NAME }}_$KSU_VERSION" >> $GITHUB_ENV

          # Set SUSFS
          git clone $SUSFS_SOURCE -b $SUSFS_BRANCH susfs4ksu --depth=1
          git clone https://github.com/JackA1ltman/NonGKI_Kernel_Patches.git -b op_kernel NonGKI_Kernel_Patches --depth=1
          cp susfs4ksu/kernel_patches/fs/* fs/
          cp susfs4ksu/kernel_patches/include/linux/* include/linux/

      - name: Patch Kernel for no-kprobe
        run: |
          cd $GITHUB_WORKSPACE/device_kernel
          if [[ -d "NonGKI_Kernel_Patches" ]]; then
            echo "Folder existed."
          else
            git clone https://github.com/JackA1ltman/NonGKI_Kernel_Patches.git -b op_kernel NonGKI_Kernel_Patches
          fi

          cp NonGKI_Kernel_Patches/patches.sh ./

          bash patches.sh

      - name: Extra Kernel Options
        run: |
          # Only ${{ env.DEVICE_NAME }} use it.
          cd $GITHUB_WORKSPACE/device_kernel
          echo "CONFIG_CPU_BIG_ENDIAN=n" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_COMPAT_VDSO=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_LTO_NONE=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_INIT_STACK_NONE=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          sed -i 's/# CONFIG_SECCOMP is not set/CONFIG_SECCOMP=y/' ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

          # sed -i 's|\$(obj)/config_data.gz: [^ ]* FORCE|\$(obj)/config_data.gz: $(KCONFIG_CONFIG) FORCE|' kernel/Makefile

      - name: Patch Kernel of SUSFS
        if: env.SUSFS_ENABLE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          cp susfs4ksu/kernel_patches/50_add_susfs_in_kernel-$KERNEL_VERSION.patch ./

          patch -p1 < 50_add_susfs_in_kernel-${{ env.KERNEL_VERSION }}.patch || true

      - name: Fixed Kernel Patch
        if: env.SUSFS_ENABLE == 'true' && env.SUSFS_FIXED == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          cp NonGKI_Kernel_Patches/kona_oos/namespace_fixed.patch ./
          cp NonGKI_Kernel_Patches/kona_oos/task_mmu_fixed.patch ./
          cp NonGKI_Kernel_Patches/kona_oos/ksu_backport.patch ./

          patch -p1 < namespace_fixed.patch || true
          patch -p1 < task_mmu_fixed.patch || true
          patch -p1 < ksu_backport.patch || true

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.DEVICE_NAME }}${{ env.UPLOADNAME }}
          max-size: 2G

      - name: Build Kernel
        run: |
          export PATH=$GITHUB_WORKSPACE/clang-custom/bin:$PATH
          cd $GITHUB_WORKSPACE/device_kernel/
          make CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ env.DEFCONFIG_NAME }}
          make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }}

      - name: Make Anykernel3 Flasher
        run: |
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot"
          TIME=$(date +"%Y%m%d%H%M%S")
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "UPLOAD=Anykernel3" >> $GITHUB_ENV

          cd $GITHUB_WORKSPACE/device_kernel/
          mkdir -p tmp
          cp -fp $IMAGE_DIR/Image.gz tmp
          cp -fp $IMAGE_DIR/dtbo.img tmp

          if [ -f "$IMAGE_DIR/dtb" ]; then
            echo "Found DTB!"
            cp -fp $IMAGE_DIR/dtb tmp
          else
            echo "Doesn't found DTB! Your device maybe needn't the file."
          fi

          cp -rp ./Anykernel3/* tmp
          cd tmp
          7za a -mx9 tmp.zip *
          cd ..
          cp -fp tmp/tmp.zip ${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-Anykernel3.zip
          rm -rf tmp

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-${{ env.UPLOAD }}
          path: |
            device_kernel/${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-${{ env.TIME }}-${{ env.UPLOAD }}.zip
