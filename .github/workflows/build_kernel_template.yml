name: Build Kernel Template (Cannot be used for compilation directly)
on:
  workflow_call:
  workflow_dispatch:
env:
  PYTHON_VERSION: "2" # Only 2(Ubuntu 22.04) or 3(Any OS Versions).
  PACK_METHOD: "Anykernel3" # Anykernel3 need SOURCE and BRANCH, MKBOOTIMG needn't it.
  KERNELSU_METHOD: "shell" # shell, manual and only.
  PATCHES_SOURCE: "author/source" # [your_name]/[your_patch] -> gooder123/NonGKI_Patcher
  PATCHES_BRANCH: "main" # [your_branch] -> main
  HOOK_METHOD: "normal" # manual hook method,can choice vfs and normal.
  PROFILE_NAME: "codename_rom_template.env" # your profile name.
  KERNELSU_SUS_PATCH: "true" # if u need manual susfs patch to kernelsu.
  GENERATE_DTB: "false" # if u kernel need DTB , but cannot auto generate it. (Only Anykernel3).
  GENERATE_CHIP: "qcom" # only supported for qcom and mediatek.
  BUILD_DEBUGGER: "false" # Output build errors.

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Configuration
        run: |
          CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/${{ env.PROFILE_NAME }} | head -n 1 | cut -d "=" -f 2)
          CONFIG_LIST=(
              DEVICE_NAME
              DEVICE_CODENAME
              CUSTOM_CMDS
              EXTRA_CMDS
              KERNEL_SOURCE
              KERNEL_BRANCH
              CLANG_SOURCE
              CLANG_BRANCH
              GCC_GNU
              GCC_64_SOURCE
              GCC_64_BRANCH
              GCC_32_SOURCE
              GCC_32_BRANCH
              DEFCONFIG_SOURCE
              DEFCONFIG_NAME
              DEFCONFIG_ORIGIN_IMAGE
              KERNELSU_SOURCE
              KERNELSU_BRANCH
              KERNELSU_NAME
              SUSFS_ENABLE
              SUSFS_FIXED
              AK3_SOURCE
              AK3_BRANCH
              BOOT_SOURCE
              LXC_ENABLE
              HAVE_NO_DTBO
              GENERATE_DTB
              GENERATE_CHIP
              ROM_TEXT

          )

          for CONFIG in "${CONFIG_LIST[@]}"; do
              if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
              else
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              fi
          done

          # Move patch folder to tmp
          mv $GITHUB_WORKSPACE/Patches /tmp/

      - name: Free Disk Space (Ubuntu)
        if: env.LXC_ENABLE == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Maximize build space
        if: env.LXC_ENABLE != 'true'
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 20480
          temp-reserve-mb: 4096
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "false"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install GNU GCC
        if: env.GCC_GNU == 'true'
        run: |
          if [ -z ${{ env.GCC_64_SOURCE }} ] && [ -z ${{ env.GCC_32_SOURCE }} ]; then
            sudo apt-get install binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi -y
            echo "GCC_64=CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
            echo "GCC_32=CROSS_COMPILE_ARM32=arm-linux-gnueabi-" >> $GITHUB_ENV
          else
            echo "You needn't gcc powered by system."
          fi

      - name: Install necessary packages
        run: |
          lsb_release -a
          UBUNTU_VERSION=$(lsb_release -sr)
          sudo apt-get update

          if [ $UBUNTU_VERSION == "22.04" ]; then
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler
            sudo apt-get install p7zip p7zip-full -y
            if [ "${{ env.PYTHON_VERSION }}" == "3" ]; then
                sudo apt install python2 python3 -y
            elif [ "${{ env.PYTHON_VERSION }}" == "2" ]; then
                sudo apt install python2 -y
                sudo rm /usr/bin/python
                sudo ln -s /usr/bin/python2.7 /usr/bin/python
            else
                echo "You need choose a python version."
                false
            fi
          else
            sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3
            sudo apt-get install zstd libc6 binutils libc6-dev-i386 gcc g++ p7zip p7zip-full -y
          fi

      - name: Set Compile Environment
        run: |
          cd $GITHUB_WORKSPACE

          # Set GCC Aarch64
          if [ -z "${{ env.GCC_64_SOURCE }}" ]; then
            echo "Not set GCC 64!"
          else
            if [[ "${{ env.GCC_64_SOURCE }}" == *".git" ]]; then
              git clone ${{ env.GCC_64_SOURCE }} -b ${{ env.GCC_64_BRANCH }} gcc-64 --depth=1
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.tar.gz' ]]; then
              wget -O gcc-64.tar.gz ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              tar -C gcc-64/ -zxvf gcc-64.tar.gz
            fi
            if [[ "${{ env.GCC_64_SOURCE }}" == *'.zip' ]]; then
              wget -O gcc-64.zip ${{ env.GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
            fi
            GCC_64_BIN=aarch64-linux-android-
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-64/bin/$GCC_64_BIN" >> $GITHUB_ENV
          fi


          # Set GCC ARM32
          if [ -z "${{ env.GCC_32_SOURCE }}" ]; then
            echo "Not set GCC 32!"
          else
            if [[ "${{ env.GCC_32_SOURCE }}" == *".git" ]]; then
              git clone ${{ env.GCC_32_SOURCE }} -b ${{ env.GCC_32_BRANCH }} gcc-32 --depth=1
            fi
            if [[ "${{ env.GCC_32_SOURCE }}" == *'.tar.gz' ]]; then
              wget -O gcc-32.tar.gz ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              tar -C gcc-32/ -zxvf gcc-32.tar.gz
            fi
            if [[ "${{ env.GCC_32_SOURCE }}" == *'.zip' ]]; then
              wget -O gcc-32.zip ${{ env.GCC_32_SOURCE }}
              mkdir gcc-32
              unzip gcc-32.zip -d gcc-32/
            fi
            GCC_32_BIN=arm-linux-androideabi-
            echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/gcc-32/bin/$GCC_32_BIN" >> $GITHUB_ENV
          fi

          # Set Clang
          if [[ "${{ env.CLANG_SOURCE }}" == *".git" ]]; then
            git clone ${{ env.CLANG_SOURCE }} -b ${{ env.CLANG_BRANCH }} clang-custom --depth=1
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.tar.gz' ]]; then
            wget -O clang.tar.gz ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            tar -C clang-custom/ -zxvf clang.tar.gz
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.tar.xz' ]]; then
            wget -O clang.tar.xz ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            tar -C clang-custom/ -xvf clang.tar.xz --strip-components 1
          elif [[ "${{ env.CLANG_SOURCE }}" == *'.zip' ]]; then
            wget -O clang.zip ${{ env.CLANG_SOURCE }}
            mkdir clang-custom
            unzip clang.zip -d clang-custom/
          elif [[ "${{ env.CLANG_SOURCE }}" == *"antman" ]]; then
            mkdir clang-custom
            cd clang-custom
            wget ${{ env.CLANG_SOURCE }} -O antman
            chmod +x antman
            bash antman -S
          else
            echo "You needn't clang!"
          fi

      - name: Get Kernel Source
        run: |
          cd $GITHUB_WORKSPACE
          git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_BRANCH }} device_kernel --depth=1
          if [[ -n "${{ env.DEFCONFIG_SOURCE }}" ]]; then
            wget ${{ env.DEFCONFIG_SOURCE }} -O device_kernel/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          elif [[ -n "${{ env.DEFCONFIG_ORIGIN_DEFCONFIG }}" ]]; then
            wget ${{ env.DEFCONFIG_ORIGIN_DEFCONFIG }} -O $GITHUB_WORKSPACE/device_kernel/Image
            $GITHUB_WORKSPACE/device_kernel/scripts/extract-ikconfig $GITHUB_WORKSPACE/device_kernel/Image > $GITHUB_WORKSPACE/device_kernel/arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi
          echo "KERNEL_VERSION=$(head -n 3 device_kernel/Makefile | grep -E 'VERSION|PATCHLEVEL' | awk '{print $3}' | paste -sd '.')" >> $GITHUB_ENV

      - name: Set KSU and SUSFS for DEFCONFIG
        run: |
          cd $GITHUB_WORKSPACE/device_kernel
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          if [[ "${{ env.SUSFS_ENABLE }}" == "true" ]]; then
            echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "# CONFIG_KSU_SUSFS_SUS_OVERLAYFS is not set" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          fi
          if [[ "${{ env.LXC_ENABLE }}" == "true" ]]; then
           echo "CONFIG_VIRTUALIZATION=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
           echo "CONFIG_KVM=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
           echo "CONFIG_VHOST_NET=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
           echo "CONFIG_VHOST_CROSS_ENDIAN_LEGACY=y" >> android-kernel/arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi

      - name: Set Pack Method and KernelSU and SUSFS
        run: |
          # Variable
          SUSFS_SOURCE=https://gitlab.com/simonpunk/susfs4ksu.git
          SUSFS_BRANCH=kernel-${{ env.KERNEL_VERSION }}

          # Set ${{ env.PACK_METHOD }} and KernelSU
          if [[ ${{ env.PACK_METHOD }} == "Anykernel3" ]]; then
            cd $GITHUB_WORKSPACE/device_kernel
            if [[ -d "Anykernel3" ]]; then
              echo "Found Anykernel3 in Kernel!"
            else
              git clone ${{ env.AK3_SOURCE }} -b ${{ env.AK3_BRANCH }} Anykernel3 --depth=1
            fi
          elif [[ ${{ env.PACK_METHOD }} == "MKBOOTIMG" ]]; then
            cd $GITHUB_WORKSPACE
            git clone https://android.googlesource.com/platform/system/tools/mkbootimg $GITHUB_WORKSPACE/mkboottools -b main-kernel-build-2024 --depth=1
            wget ${{ env.BOOT_SOURCE }} -O $GITHUB_WORKSPACE/boot_source_${{ env.DEVICE_NAME }}.img
            cd device_kernel
          else
            false
          fi
          echo "PACK_METHOD=${{ env.PACK_METHOD }}" >> $GITHUB_ENV

          if [[ ${{ env.KERNELSU_METHOD }} == "shell" ]]; then
            curl -sSL ${{ env.KERNELSU_SOURCE }} | bash -s ${{ env.KERNELSU_BRANCH }}
          elif [[ ${{ env.KERNELSU_METHOD }} == "manual" ]]; then
            rm -rf KernelSU && rm -rf KernelSU-Next
            git clone ${{ env.KERNELSU_SOURCE }} -b ${{ env.KERNELSU_BRANCH }} ${{ env.KERNELSU_NAME }}
            ln -sf "$(realpath --relative-to="$GITHUB_WORKSPACE/device_kernel/drivers" "$GITHUB_WORKSPACE/device_kernel/${{ env.KERNELSU_NAME }}/kernel")" "kernelsu"
            grep -q "kernelsu" "$GITHUB_WORKSPACE/device_kernel/drivers/Makefile" || printf "\nobj-\$(CONFIG_KSU) += kernelsu/\n" >> $GITHUB_WORKSPACE/device_kernel/drivers/Makefile
            grep -q "source \"drivers/kernelsu/Kconfig\"" "$GITHUB_WORKSPACE/device_kernel/drivers/Kconfig" || sed -i "/endmenu/i\source \"drivers/kernelsu/Kconfig\"" "$GITHUB_WORKSPACE/device_kernel/drivers/Kconfig"
            echo "KernelSU Settings done."
          elif [[ ${{ env.KERNELSU_METHOD }} == "only" ]];then
            rm -rf *KernelSU* && rm -rf drivers/kernelsu
            git clone ${{ env.KERNELSU_SOURCE }} -b ${{ env.KERNELSU_BRANCH }} ${{ env.KERNELSU_NAME }}
            ln -sf ../${{ env.KERNELSU_NAME }}/kernel drivers/kernelsu
            echo "KernelSU git done."
          else
            false
          fi
          echo "KERNELSU_METHOD=${{ env.KERNELSU_METHOD }}" >> $GITHUB_ENV
          KSU_VERSION=$(cd ${{ env.KERNELSU_NAME }} && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          echo "UPLOADNAME=-${{ env.KERNELSU_NAME }}_$KSU_VERSION" >> $GITHUB_ENV

          # Set SUSFS
          if [[ "${{ env.SUSFS_ENABLE }}" == true ]]; then
            if [[ "${{ env.SUSFS_FIXED }}" == true ]]; then
              if [ -z "${{ env.PATCHES_SOURCE }}" ] || [ -z "${{ env.PATCHES_BRANCH }}" ]; then
                echo "Please input vaild source and branch!"
                false
              elif [[ ${{ env.PATCHES_SOURCE }} == *".git" ]]; then
                echo "Please do not set a full URL in PATCH_SOURCE!"
                false
              else
                git clone https://github.com/${{ env.PATCHES_SOURCE }}.git -b ${{ env.PATCHES_BRANCH }} NonGKI_Kernel_Patches --depth=1 # It's not necessary.
              fi
            fi
            git clone $SUSFS_SOURCE -b $SUSFS_BRANCH susfs4ksu --depth=1
            cp susfs4ksu/kernel_patches/fs/* fs/
            cp susfs4ksu/kernel_patches/include/linux/* include/linux/
          else
            echo "Disabled SUSFS !"
          fi

      - name: Patch Kernel for no-kprobe
        run: |
          cd $GITHUB_WORKSPACE
          KERNEL=$(echo "${{ env.KERNEL_VERSION }}" | awk -F '.' '{print $1}')
          PATCHLEVEL=$(echo "${{ env.KERNEL_VERSION }}" | awk -F '.' '{print $2}')
          if grep -q "CONFIG_KSU" "device_kernel/fs/exec.c"; then
            echo "Your kernel source code appears to have been manually patched, so this step is skipped."
          else
            if [[ ${{ env.HOOK_METHOD }} == "normal" ]]; then
              if [[ -f "/tmp/Patches/normal_patches.sh" ]]; then
                  cp /tmp/Patches/normal_patches.sh device_kernel/
                  cd device_kernel
                  bash normal_patches.sh
                  echo "execuated patch successfully."
                  if [ $KERNEL -lt 5 ] && [ $PATCHLEVEL -lt 14 ]; then
                      cp /tmp/Patches/extra_patches.sh ./
                      bash extra_patches.sh
                      echo "execuated extra patch successfully."
                  else
                      echo "your kernel needn't the patch."
                  fi
                  if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                      cp /tmp/Patches/backport_patches.sh ./
                      bash backport_patches.sh
                      echo "execuated backport patch successfully."
                  fi
              else
                  echo "Cannot found normal_patches.sh in build project , please check u file existed in build project !"
                  false
              fi
            elif [[ ${{ env.HOOK_METHOD }} == "vfs" ]]; then
              if [[ -f "/tmp/Patches/vfs_hook_patches.sh" ]]; then
                  cp /tmp/Patches/vfs_hook_patches.sh device_kernel/
                  cd device_kernel
                  bash vfs_hook_patches.sh
                  echo "execuated vfs patch successfully."
                  if [ $KERNEL -lt 5 ] && [ $PATCHLEVEL -lt 14 ]; then
                      cp /tmp/Patches/extra_patches.sh ./
                      bash extra_patches.sh
                      echo "execuated extra patch successfully."
                  else
                      echo "your kernel needn't extra patch."
                  fi
                  if [[ "${{ env.KERNELSU_NAME }}" != "KernelSU-Next" ]]; then
                      cp /tmp/Patches/backport_patches.sh ./
                      bash backport_patches.sh
                      echo "execuated backport patch successfully."
                  fi
              else
                  echo "Cannot found vfs_hook_patches.sh in build project , please check u file existed in build project !"
                  false
              fi
            else
              echo "please input vaild option!"
              false
            fi
          fi

      - name: Extra Kernel Options
        run: |
          # Only ${{ env.DEVICE_NAME }} use it.
          cd $GITHUB_WORKSPACE/device_kernel
          # echo "CONFIG_CPU_BIG_ENDIAN=n" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          # echo "CONFIG_COMPAT_VDSO=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          # echo "CONFIG_LTO_NONE=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          # echo "CONFIG_INIT_STACK_NONE=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          # sed -i 's/# CONFIG_SECCOMP is not set/CONFIG_SECCOMP=y/' ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

      - name: Added mkdtboimg to kernel (Experiment)
        if: env.HAVE_NO_DTBO == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/scripts/dtc
          wget https://android.googlesource.com/platform/system/libufdt/+archive/refs/heads/main/utils/src.tar.gz
          tar zxvf src.tar.gz
          rm -f src.tar.gz

          cd $GITHUB_WORKSPACE/device_kernel
          cp /tmp/Patches/temp_dtbo.patch ./
          patch -p1 < temp_dtbo.patch
          sed -i '/targets := Image Image.bz2 Image.gz Image.lz4 Image.lzma Image.lzo/s/$/ dtbo.img/' ./arch/arm64/boot/Makefile
          sed -i '/$(obj)\/Image\.gz-dtb: $(obj)\/Image\.gz $(DTB_OBJS) FORCE/a \#DTBO\n$(obj)\/dtbo.img: $(DTBO_OBJS) FORCE\n\t$(call if_changed,mkdtimg)' ./arch/arm64/boot/Makefile
          sed -i '/KBUILD_DTBS\t:= dtbs/a \#DTBO\nKBUILD_DTBO_IMG := dtbo.img' ./arch/arm64/Makefile
          sed -i '/dtc-tmp = $(subst $(comma),_,$(dot-target)\.dts\.tmp)/a \#DTBO\n# mkdtimg\n#----------------------------------------------------------------------------\nquiet_cmd_mkdtimg = DTBOIMG $@\ncmd_mkdtimg = python3 $(srctree)\/scripts\/dtc\/mkdtboimg.py create $@ --page_size=4096 $(filter-out FORCE,$^)' ./scripts/Makefile.lib

      - name: Setup LXC (Experiment)
        if: env.LXC_ENABLE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel
          rm -rf lxc
          git clone https://github.com/tomxi1997/lxc-docker-support-for-android.git lxc
          echo 'source "lxc/Kconfig"' >> "Kconfig"

          echo "CONFIG_DOCKER=y" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

          sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

          #sed -i '/CONFIG_LOCALVERSION/d' ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          #echo 'CONFIG_LOCALVERSION="-LXC"' >> ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

          chmod +x $GITHUB_WORKSPACE/device_kernel/lxc/runcpatch.sh
          if [ -f $GITHUB_WORKSPACE/device_kernel/kernel/cgroup/cgroup.c ]; then
              sh $GITHUB_WORKSPACE/device_kernel/lxc/runcpatch.sh $GITHUB_WORKSPACE/device_kernel/kernel/cgroup/cgroup.c
          fi

          if [ -f $GITHUB_WORKSPACE/device_kernel/kernel/cgroup.c ]; then
              sh $GITHUB_WORKSPACE/device_kernel/lxc/runcpatch.sh $GITHUB_WORKSPACE/device_kernel/kernel/cgroup.c
          fi

          if [ -f $GITHUB_WORKSPACE/device_kernel/net/netfilter/xt_qtaguid.c ]; then
              patch -p0 < $GITHUB_WORKSPACE/device_kernel/lxc/xt_qtaguid.patch
          fi

          echo "LXC_ENABLE=lxc" >> $GITHUB_ENV

      - name: Patch Kernel of SUSFS
        if: env.SUSFS_ENABLE == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          cp susfs4ksu/kernel_patches/50_add_susfs_in_kernel-$KERNEL_VERSION.patch ./

          patch -p1 < 50_add_susfs_in_kernel-${{ env.KERNEL_VERSION }}.patch || true

          if [[ "${{ env.KERNELSU_NAME }}"  == "KernelSU-Next" ]]; then
            if [[ "${{ env.KERNELSU_SOURCE }}" =~ ".sh" && "${{ env.KERNELSU_BRANCH }}" =~ "susfs" ]]; then
                echo "KernelSU-Next SuSFS Branch detected!"
            elif [[ "${{ env.KERNELSU_SOURCE }}" =~ ".sh" ]]; then
                git clone ${{ env.KERNELSU_SOURCE }} -b ${{ env.KERNELSU_BRANCH }}-susfs susfs_fixed
                rsync -av --exclude='.git' susfs_fixed/kernel/ KernelSU-Next/kernel/
            fi
          elif [[ "${{ env.KERNELSU_SUS_PATCH }}" == "true" ]]; then
            cp susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./${{ env.KERNELSU_NAME }}
            cd ${{ env.KERNELSU_NAME }}
            patch -p1 < 10_enable_susfs_for_ksu.patch || true
          fi

      - name: Patch Debugger
        if: env.BUILD_DEBUGGER == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          mapfile -t REJ_FILES < <(find . -type f -name "*.rej")
          if [ ${#REJ_FILES[@]} -eq 0 ]; then
            echo "Your kernel have no any rej files."
          else
            for CAT_REJ in "${REJ_FILES[@]}"; do
                echo "Found .rej file: $CAT_REJ"
                cat $CAT_REJ
                echo "==========EOF=========="
            done
            false
          fi

      - name: Fixed Kernel Patch
        if: env.SUSFS_ENABLE == 'true' && env.SUSFS_FIXED == 'true'
        run: |
          cd $GITHUB_WORKSPACE/device_kernel/
          cp NonGKI_Kernel_Patches/[patch_folder]/[patch_file].patch ./

          patch -p1 < [patch_file].patch || true

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.DEVICE_NAME }}${{ env.UPLOADNAME }}
          max-size: 2G

      - name: Build Kernel
        run: |
          export PATH=$GITHUB_WORKSPACE/clang-custom/bin:$PATH
          cd $GITHUB_WORKSPACE/device_kernel/
          if [ -z "${{ env.GCC_32 }}" ] && [ -z "${{ env.GCC_64 }}" ]; then
            make CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.DEFCONFIG_NAME }}
            make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }}
          else
            make CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ env.DEFCONFIG_NAME }}
            make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }}
          fi

      - name: Make Anykernel3 Flasher
        if: env.PACK_METHOD == 'Anykernel3'
        run: |
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot"
          TIME=$(date +"%Y%m%d%H%M%S")

          cd $GITHUB_WORKSPACE/device_kernel/

          mkdir -p tmp

          if [[ "${{ env.AK3_SOURCE }}" =~ "osm0sis" ]]; then
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' Anykernel3/anykernel.sh
            sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' Anykernel3/anykernel.sh
            sed -i 's/IS_SLOT_DEVICE=0;/is_slot_device=auto;/g' Anykernel3/anykernel.sh
            echo "Now using official Anykernel3."
          else
            echo "Now using custom Anykernel3."
          fi

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
            cp -fp $IMAGE_DIR/Image.gz-dtb tmp
            echo "Found Image.gz-dtb !"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
            cp -fp $IMAGE_DIR/Image.gz tmp
            echo "Found Image.gz !"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
            gzip -c $IMAGE_DIR/Image > $IMAGE_DIR/Image.gz
            cp -fp $IMAGE_DIR/Image.gz tmp
            echo "Found Image ! Automatic convert Image.gz ! "
          fi

          if [[ -f "$IMAGE_DIR/dtbo.img" ]]; then
            cp -fp $IMAGE_DIR/dtbo.img tmp
            echo "Found dtbo.img !"
          else
            echo "Doesn't found dtbo.img! Your device maybe needn't the file."
          fi

          if [ -f "$IMAGE_DIR/dtb" ]; then
            echo "Found DTB!"
            cp -fp $IMAGE_DIR/dtb tmp
          elif [ "${{ env.GENERATE_DTB }}" == "true" ]; then
            if [ -d "$IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            elif [ -d "$IMAGE_DIR/dts/vendor/${{ env.GENERATE_CHIP }}" ]; then
                cat $IMAGE_DIR/dts/${{ env.GENERATE_CHIP }}/*.dtb > $IMAGE_DIR/DTB
                cp -fp $IMAGE_DIR/DTB tmp
                echo "Generated ${{ env.GENERATE_CHIP }} DTB."
            else
                echo "Missing .dtb file in dts or dts/vendor ! Generate Failed !"
                false
            fi
          else
            echo "Doesn't found DTB! Your device maybe needn't the file."
          fi

          cp -rp ./Anykernel3/* tmp
          cd tmp
          7za a -mx9 tmp.zip *
          cd ..
          cp -fp tmp/tmp.zip ${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-${{ env.PACK_METHOD }}${{ env.LXC_STATUS }}.zip
          rm -rf tmp

          echo "PACK_NAME=${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-${{ env.PACK_METHOD }}${{ env.LXC_STATUS }}.zip" >> $GITHUB_ENV

      - name: Make Latest Boot Image
        if: env.PACK_METHOD == 'MKBOOTIMG'
        run: |
          cd $GITHUB_WORKSPACE/
          IMAGE_DIR="$GITHUB_WORKSPACE/device_kernel/out/arch/arm64/boot"
          TIME=$(date +"%Y%m%d%H%M%S")
          FORMAT_MKBOOTING=$(echo `mkboottools/unpack_bootimg.py --boot_img=boot_source_${{ env.DEVICE_NAME }}.img --format mkbootimg`)

          mkboottools/unpack_bootimg.py --boot_img boot_source_${{ env.DEVICE_NAME }}.img

          if [[ -f "$IMAGE_DIR/Image.gz-dtb" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image.gz-dtb out/kernel
            echo "Found Image.gz-dtb !"
          elif [[ -f "$IMAGE_DIR/Image.gz" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image.gz out/kernel
            echo "Found Image.gz !"
          elif [[ -f "$IMAGE_DIR/Image" ]]; then
            rm -f out/kernel
            cp -fp $IMAGE_DIR/Image out/kernel
            echo "Found Image !"
          fi

          eval "mkboottools/mkbootimg.py $FORMAT_MKBOOTING -o ${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-image${{ env.LXC_STATUS }}.img"

          echo "PACK_NAME=${{ env.DEVICE_CODENAME }}-${{ env.ROM_TEXT }}-$TIME-image${{ env.LXC_STATUS }}.img" >> $GITHUB_ENV

          rm -f $GITHUB_WORKSPACE/boot_source_${{ env.DEVICE_NAME }}.img

      - name: Upload Build Artifacts For Boot Image
        if: env.PACK_METHOD == 'Anykernel3'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ env.PACK_NAME }}
          path: |
            device_kernel/${{ env.PACK_NAME }}

      - name: Upload Build Artifacts For Anykernel3
        if: env.PACK_METHOD == 'MKBOOTIMG'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ env.PACK_NAME }}
          path: |
            ${{ env.PACK_NAME }}
